#pragma once
#define MAXDEPTH 4
#define SCORENAN 99999
#define _SILENCE_STDEXT_HASH_DEPRECATION_WARNINGS

#include <QDebug>
#include <hash_map>
#include <random>
#include <time.h>

/*
红方： 帅  仕 仕 相 相  马 马  车 车  炮 炮 兵
	  16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
黑方：将 士 士 象 象 马 马 车 车 炮 炮 卒
	  32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
*/

//走棋结构体（每一个位置用一个数字表示）
typedef struct {
	short from, to;
	//被吃棋子（在搜索过程中生成）
	int capture;
}move;

//置换表结构体
typedef struct{
    int score;
    int depth;
}station;

class Board {
protected:
#pragma region 数据定义
	//棋盘表示
    int board[256] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,//48
        0,0,0,39,37,35,33,32,34,36,38,40,0,0,0,0,//64
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,41,0,0,0,0,0,42,0,0,0,0,0,
		0,0,0,43,0,44,0,45,0,46,0,47,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,27,0,28,0,29,0,30,0,31,0,0,0,0,
		0,0,0,0,25,0,0,0,0,0,26,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,23,21,19,17,16,18,20,22,24,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};
	const int LegalPosition[256] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

    //棋方标志 0=>红色 1=>黑色
    int side = 0;
    bool Defeat = false;
    bool Victory = false;

	//走法数组（为搜索准备多个走法组）
	move MoveArray[MAXDEPTH][128];
	int MoveNum[MAXDEPTH];
	int Depth = 0;

	//走法生成辅助数组（空间换取时间）
	const int KnightDir[8] = { 0x0e, -0x12, -0x21, -0x1f, -0x0e, 0x12, 0x21, 0x1f };
    const int KnightCheck[8] = { -0x01, -0x01, -0x10, -0x10, 0x01, 0x01, 0x10, 0x10 };
	const int KnightAttackCheck[8] = { 0x0f, -0x11, -0x11, -0x0f, -0x0f, 0x11, 0x11, 0x0f };
	const int KnightPosition[256] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	const int BishopDir[4] = { 0x22, 0x1e, -0x22, -0x1e };
	const int BishopCheck[4] = { 0x11, 0x0f, -0x11, -0x0f };
	const int BishopPosition[256] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,
		0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	const int KingDir[4] = { 0x01, 0x10, - 0x01, -0x10 };
	const int KingPosition[256] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,//48
		0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,//51
		0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,//67
		0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,//83
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,//99
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,//115
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,//131
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,//147
		0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,//163
		0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,//179
		0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,//195
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	const int AdvisorDir[4] = { 0x11, 0x0f, -0x11, -0x0f };
	const int AdvisorPosition[256] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	const int RookDir[4] = { 0x01, 0x10, -0x01, -0x10 };
	const int RookPosition[256] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	const int CannonDir[4] = { 0x01, 0x10, -0x01, -0x10 };
	const int CannonPosition[256] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,//160
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	const int SoldierDir[2][3] = { 0x01,-0x10,-0x01,0x01,0x10,-0x01 };
	const int SoldierPostion[2][256] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,
		0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,
		0,0,0,1,0,1,0,1,0,1,0,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	};

	short pieces[48] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		199,198,200,197,201,196,202,195,203,164,170,147,149,151,153,155,
		55,54,56,53,57,52,58,51,59,84,90,99,101,103,105,107,
	};

	//局面评估辅助数组
	const int Locate[48] = {
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,1,1,2,2,3,3,4,4,5,5,6,6,6,6,6,
		0,1,1,2,2,3,3,4,4,5,5,6,6,6,6,6,
	};
	const short PieceToValue[2][7][256] = {
		//红方
		{
			{//帅
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                0,0,0,0,0,0,1005,1005,1005,0,0,0,0,0,0,0,
                0,0,0,0,0,0,1010,1010,1010,0,0,0,0,0,0,0,
                0,0,0,0,0,0,1015,1020,1015,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//仕
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,30,0,30,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,30,0,30,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//相
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,25,0,0,0,25,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,20,0,0,0,35,0,0,0,20,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,30,0,0,0,30,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//马
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,70,80,90,80,70,80,90,80,70,0,0,0,0,
				0,0,0,80,110,125,90,70,90,125,110,80,0,0,0,0,
				0,0,0,90,100,120,125,120,125,120,100,90,0,0,0,0,
				0,0,0,90,100,120,130,110,130,120,100,90,0,0,0,0,
				0,0,0,90,110,110,120,100,120,110,110,90,0,0,0,0,
				0,0,0,90,100,100,110,100,110,100,100,90,0,0,0,0,
				0,0,0,80,90,100,100,90,100,100,90,80,0,0,0,0,
				0,0,0,80,80,90,90,80,90,90,80,80,0,0,0,0,
				0,0,0,70,75,75,70,50,70,75,70,60,0,0,0,0,
				0,0,0,60,70,75,70,60,75,75,70,60,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//车
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,160,170,160,150,150,150,160,170,160,0,0,0,0,
				0,0,0,170,180,170,190,250,190,170,180,170,0,0,0,0,
				0,0,0,170,190,200,220,240,220,200,190,170,0,0,0,0,
				0,0,0,180,220,210,240,250,240,210,220,180,0,0,0,0,
				0,0,0,180,220,210,240,250,240,210,220,180,0,0,0,0,
				0,0,0,180,220,210,240,250,240,210,220,180,0,0,0,0,
				0,0,0,170,190,180,220,240,220,200,190,170,0,0,0,0,
				0,0,0,170,180,170,170,160,170,170,180,170,0,0,0,0,
				0,0,0,160,170,160,160,150,160,160,170,160,0,0,0,0,
				0,0,0,150,160,150,160,150,160,150,160,150,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//炮
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,125,130,100,70,60,70,100,130,125,0,0,0,0,
				0,0,0,110,125,100,70,60,70,100,125,110,0,0,0,0,
				0,0,0,100,120,90,80,80,80,90,120,100,0,0,0,0,
				0,0,0,90,110,90,110,130,110,90,110,90,0,0,0,0,
				0,0,0,90,110,90,110,130,110,90,110,90,0,0,0,0,
				0,0,0,90,100,90,110,130,110,90,100,90,0,0,0,0,
				0,0,0,90,100,90,90,110,90,90,100,90,0,0,0,0,
				0,0,0,90,100,80,80,70,80,80,100,90,0,0,0,0,
				0,0,0,80,90,80,70,65,70,80,90,80,0,0,0,0,
				0,0,0,80,90,80,70,60,70,80,90,80,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//兵
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,10,10,10,20,25,20,10,10,10,0,0,0,0,
				0,0,0,25,30,40,50,60,50,40,30,25,0,0,0,0,
				0,0,0,25,30,30,40,40,40,30,30,25,0,0,0,
				0,0,0,20,25,25,30,30,30,25,25,20,0,0,0,0,
				0,0,0,15,20,20,20,20,20,20,20,15,0,0,0,0,
				0,0,0,10,0,15,0,15,0,15,0,10,0,0,0,0,
				0,0,0,10,0,10,0,15,0,10,0,10,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
		},
		//黑方
		{
			{//将
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,     
             0,0,0,0,0,0,1015,1020,1015,0,0,0,0,0,0,0,
             0,0,0,0,0,0,1010,1010,1010,0,0,0,0,0,0,0,
             0,0,0,0,0,0,1005,1005,1005,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//士
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,30,0,30,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,30,0,30,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//象
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,30,0,0,0,30,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,20,0,0,0,35,0,0,0,20,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,25,0,0,0,25,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//马
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,60,70,75,70,60,75,75,70,60,0,0,0,0,
				0,0,0,70,75,75,70,50,70,75,70,60,0,0,0,0,
				0,0,0,80,80,90,90,80,90,90,80,80,0,0,0,0,
				0,0,0,80,90,100,100,90,100,100,90,80,0,0,0,0,
				0,0,0,90,100,100,110,100,110,100,100,90,0,0,0,0,
				0,0,0,90,110,110,120,100,120,110,110,90,0,0,0,0,
				0,0,0,90,100,120,130,110,130,120,100,90,0,0,0,0,
				0,0,0,90,100,120,125,120,125,120,100,90,0,0,0,0,
				0,0,0,80,110,125,90,70,90,125,110,80,0,0,0,0,
				0,0,0,70,80,90,80,70,80,90,80,70,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//车
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,150,160,150,160,150,160,150,160,150,0,0,0,0,
				0,0,0,160,170,160,160,150,160,160,170,160,0,0,0,0,
				0,0,0,170,180,170,170,160,170,170,180,170,0,0,0,0,
				0,0,0,170,190,180,220,240,220,200,190,170,0,0,0,0,
				0,0,0,180,220,210,240,250,240,210,220,180,0,0,0,0,
				0,0,0,180,220,210,240,250,240,210,220,180,0,0,0,0,
				0,0,0,180,220,210,240,250,240,210,220,180,0,0,0,0,
				0,0,0,170,190,200,220,240,220,200,190,170,0,0,0,0,
				0,0,0,170,180,170,190,250,190,170,180,170,0,0,0,0,
				0,0,0,160,170,160,150,150,150,160,170,160,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//炮
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,80,90,80,70,60,70,80,90,80,0,0,0,0,
				0,0,0,80,90,80,70,65,70,80,90,80,0,0,0,0,
				0,0,0,90,100,80,80,70,80,80,100,90,0,0,0,0,
				0,0,0,90,100,90,90,110,90,90,100,90,0,0,0,0,
				0,0,0,90,110,90,110,130,110,90,110,90,0,0,0,0,
				0,0,0,90,110,90,110,130,110,90,110,90,0,0,0,0,
				0,0,0,90,100,90,110,130,110,90,100,90,0,0,0,0,
				0,0,0,100,120,90,80,80,80,90,120,100,0,0,0,0,
				0,0,0,110,125,100,70,60,70,100,125,110,0,0,0,0,
				0,0,0,125,130,100,70,60,70,100,130,125,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
			{//卒
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,10,0,10,0,15,0,10,0,10,0,0,0,0,
				0,0,0,10,0,15,0,15,0,15,0,10,0,0,0,0,
				0,0,0,15,20,20,20,20,20,20,20,15,0,0,0,0,
				0,0,0,20,25,25,30,30,30,25,25,20,0,0,0,0,
				0,0,0,25,30,30,40,40,40,30,30,25,0,0,0,
				0,0,0,25,30,40,50,60,50,40,30,25,0,0,0,0,
				0,0,0,10,10,10,20,25,20,10,10,10,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
			},
		}

	};

	//走法栈（在搜索的时候可能会用到，最大深度与最大搜索深度一致）
	move MoveStack[48];
	int StackTop = 0;
	move BestMove;
	const int MaxValue = 9000;

    //为了最大化剪枝算法的效果，用于更改走法生成顺序的辅助数组
    /*    0   1 2  3  4  5  6  7  8  9  10 11 12 13 14 15
    红方： 帅  仕 仕 相 相  马 马  车 车  炮 炮 兵
          16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
    黑方：将 士 士 象 象 马 马 车 车 炮 炮 卒
          32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
    */
    int GenOrder[16] = {7,8,5,6,9,10,3,4,1,2,0,11,12,13,14,15};

    //置换表map,全局局面变量，局面随机数，棋子随机数
    std::hash_map<long int,station> HashTable;
    long int PresentStation;
    long int BoardNum[256];
    long int PieceNum[48];
    long int SideNum;

#pragma endregion


#pragma region 其他函数
public:
	Board() {
        //初始化置换表相关数据
        srand(time(NULL));
        for(int i=0;i<256;i++){
            BoardNum[i] = rand()^((long)rand()<<15)^((long)rand()<<30);
        }
        for(int i=0;i<48;i++){
            PieceNum[i] = rand()^((long)rand()<<15)^((long)rand()<<30);
        }
\
        PresentStation = rand()^((long)rand()<<15)^((long)rand()<<30);

        SideNum = rand()^((long)rand()<<15)^((long)rand()<<30);
    }
protected:
	void ChangeSide() { side = 1 - side; }
#pragma endregion


#pragma region 走法生成

	//走法生成
	void GenAllMove();
	void InitGen();
	void SaveMove( int from,  int to);

	//具体棋子走法生成
	void KnightMove( int p);
	void BishopMove( int p);
	void KingMove( int p);
	void AdvisorMove( int p);
	void RookMove( int p);
	void CannonMove( int p);
	void SoldierMove( int p);

	//将军检测（传入被检测方的标志）
	int check(int ISide);
#pragma endregion


#pragma region 局面评估
	//基本价值评估	=>	带棋子数组评估	=>	多重棋子价值数组
	//				=>	位置分数		=>	灵活性分数
	//传入当前
	short Eval();
#pragma endregion


#pragma region 走法搜索
	//最大最小值搜索	=>	alpha-beta剪枝搜索	=>	缓存/优化/算杀搜索
	//负极大值搜索与最大最小值效果相近
	bool MakeMove(move m);
	void UnMakeMove();
public:
    int BoardSearch(int depth);

private:
    //树搜索算法
	int MaxSearch(int depth);
	int MinSearch(int depth);
	
    //阿尔法贝塔剪枝算法
    int AlphaBetaSearch(int depth,int alpha, int beta);
    int AlphaSearch(int depth,int alpha, int beta);
    int BetaSearch(int depth, int alpha, int beta);

#pragma endregion


#pragma region 哈希表优化
    //搜索前初始化
    void ClearZobrist(){
        HashTable.clear();
    }
    int ReadHashTable();        //读取哈希值
    void SaveHashTable(int value);  //保存局面的分数



#pragma endregion


public:
    //人类棋手下棋
    move H_Player(int from_x,int from_y,int to_x,int to_y){
        move HMove;
        HMove.from = from_x + 3 + (from_y + 3) * 16;
        HMove.to = to_x + 3 + (to_y + 3) * 16;
        HMove.capture = board[HMove.to];
        MakeMove(HMove);
        StackTop--;

        return C_Player();
    }

private:
    //电脑下棋
    move C_Player(){

        int score = BoardSearch(MAXDEPTH);
        MakeMove(BestMove);
        StackTop--;

        if(score<-8000){
            qDebug("defeat,score is %d", score);
            Defeat = true;
        }
        if(!pieces[side*16+16]){
            qDebug("victory,score is %d", score);
            Victory = true;
        }

        qDebug("the move is %d, %d", BestMove.from, BestMove.to);

        return BestMove;
    }
};
